[{"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\index.js":"1","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\serviceWorkerRegistration.js":"2","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\store.js":"4","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\App.jsx":"5","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\LoginSignup.jsx":"6","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\JamExplore.jsx":"7","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\JamCreate.jsx":"8","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\MembersList.jsx":"9","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\MainNav.jsx":"10","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\Home.jsx":"11","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\UserProfile.jsx":"12","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\JamDetails.jsx":"13","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\reducers\\index.js":"14","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\UserSection.jsx":"15","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamList.jsx":"16","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\LoaderSpinner.jsx":"17","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\actions\\userActions.js":"18","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamScroll.jsx":"19","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\services\\mainNavService.js":"20","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamPreview.jsx":"21","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\services\\authService.js":"22","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\actions\\jamActions.js":"23","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\HeroSection.jsx":"24","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\UserList.jsx":"25","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\services\\userService.js":"26","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\services\\utilService.js":"27","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\reducers\\reviewReducer.js":"28","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\reducers\\systemReducer.js":"29","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\reducers\\userReducer.js":"30","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\reducers\\jamReducer.js":"31","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamCreateForm.jsx":"32","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\assets\\img\\inst-icons\\icons.js":"33","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\services\\jamService.js":"34","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\UserPreview.jsx":"35","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamUserPreview.jsx":"36","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\MapContainer.jsx":"37","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\UserProfile\\UserTalents.jsx":"38","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamGoingModal.jsx":"39","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamDetailsNavbar.jsx":"40","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\UserProfile\\UserInfo.jsx":"41","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\services\\httpService.js":"42","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\LoginModal.jsx":"43","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\InviteModal.jsx":"44","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\InviteFriends.jsx":"45","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\StaticMap.jsx":"46","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\JamsList.jsx":"47","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamChat.jsx":"48","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\services\\socketService.js":"49"},{"size":935,"mtime":1610550173931,"results":"50","hashOfConfig":"51"},{"size":5201,"mtime":1610550173933,"results":"52","hashOfConfig":"51"},{"size":377,"mtime":1610550173933,"results":"53","hashOfConfig":"51"},{"size":323,"mtime":1610550173941,"results":"54","hashOfConfig":"51"},{"size":1420,"mtime":1611229453835,"results":"55","hashOfConfig":"51"},{"size":4878,"mtime":1610981948005,"results":"56","hashOfConfig":"51"},{"size":17647,"mtime":1611484351799,"results":"57","hashOfConfig":"51"},{"size":1790,"mtime":1610881707933,"results":"58","hashOfConfig":"51"},{"size":3949,"mtime":1611323654806,"results":"59","hashOfConfig":"51"},{"size":3190,"mtime":1611435900258,"results":"60","hashOfConfig":"51"},{"size":3433,"mtime":1611484351797,"results":"61","hashOfConfig":"51"},{"size":2639,"mtime":1611353360467,"results":"62","hashOfConfig":"51"},{"size":8539,"mtime":1611484351798,"results":"63","hashOfConfig":"51"},{"size":396,"mtime":1610550173940,"results":"64","hashOfConfig":"51"},{"size":4843,"mtime":1611435900263,"results":"65","hashOfConfig":"51"},{"size":268,"mtime":1611075656062,"results":"66","hashOfConfig":"51"},{"size":502,"mtime":1611071013062,"results":"67","hashOfConfig":"51"},{"size":1628,"mtime":1611354870850,"results":"68","hashOfConfig":"51"},{"size":1628,"mtime":1611484351795,"results":"69","hashOfConfig":"51"},{"size":1592,"mtime":1611167207992,"results":"70","hashOfConfig":"51"},{"size":2648,"mtime":1611484351794,"results":"71","hashOfConfig":"51"},{"size":1596,"mtime":1610560975527,"results":"72","hashOfConfig":"51"},{"size":1544,"mtime":1611273806519,"results":"73","hashOfConfig":"51"},{"size":1445,"mtime":1611406655957,"results":"74","hashOfConfig":"51"},{"size":278,"mtime":1610808786640,"results":"75","hashOfConfig":"51"},{"size":2017,"mtime":1611173592271,"results":"76","hashOfConfig":"51"},{"size":1052,"mtime":1610708401163,"results":"77","hashOfConfig":"51"},{"size":669,"mtime":1610550173940,"results":"78","hashOfConfig":"51"},{"size":322,"mtime":1610550173940,"results":"79","hashOfConfig":"51"},{"size":849,"mtime":1611173007959,"results":"80","hashOfConfig":"51"},{"size":1066,"mtime":1611229453869,"results":"81","hashOfConfig":"51"},{"size":5249,"mtime":1611150155216,"results":"82","hashOfConfig":"51"},{"size":413,"mtime":1611484351779,"results":"83","hashOfConfig":"51"},{"size":1656,"mtime":1611273806518,"results":"84","hashOfConfig":"51"},{"size":1550,"mtime":1611416173879,"results":"85","hashOfConfig":"51"},{"size":654,"mtime":1611273806511,"results":"86","hashOfConfig":"51"},{"size":1047,"mtime":1611048188990,"results":"87","hashOfConfig":"51"},{"size":1156,"mtime":1611353360461,"results":"88","hashOfConfig":"51"},{"size":4159,"mtime":1611484351791,"results":"89","hashOfConfig":"51"},{"size":3441,"mtime":1611484351789,"results":"90","hashOfConfig":"51"},{"size":2059,"mtime":1611353360460,"results":"91","hashOfConfig":"51"},{"size":1081,"mtime":1610550173935,"results":"92","hashOfConfig":"51"},{"size":1683,"mtime":1611229453855,"results":"93","hashOfConfig":"51"},{"size":5265,"mtime":1611435900253,"results":"94","hashOfConfig":"51"},{"size":1430,"mtime":1611435900250,"results":"95","hashOfConfig":"51"},{"size":472,"mtime":1611433924653,"results":"96","hashOfConfig":"51"},{"size":4613,"mtime":1611323654804,"results":"97","hashOfConfig":"51"},{"size":2559,"mtime":1611434902971,"results":"98","hashOfConfig":"51"},{"size":1628,"mtime":1610550173936,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"15qkesh",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"102"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"102"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"102"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"102"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"102"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"102"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"102"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"102"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"102"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"102"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"102"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"102"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"102"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"102"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\index.js",[],["214","215"],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\serviceWorkerRegistration.js",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\store.js",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\App.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\LoginSignup.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\JamExplore.jsx",["216","217"],"import React, { Component } from \"react\";\r\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from \"google-maps-react\";\r\nimport { connect } from \"react-redux\";\r\nimport { loadJams, updateJamGoing } from \"../store/actions/jamActions.js\";\r\nimport { loadUsers } from \"../store/actions/userActions.js\";\r\nimport jamMarker from \"../assets/img/green-marker.png\"\r\nimport GpsFixedIcon from '@material-ui/icons/GpsFixed';\r\nimport Loader from \"react-loader-spinner\";\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\r\nimport EmojiPeopleRoundedIcon from '@material-ui/icons/EmojiPeopleRounded';\r\nimport RoomRoundedIcon from '@material-ui/icons/RoomRounded';\r\nimport AccessTimeRoundedIcon from '@material-ui/icons/AccessTimeRounded';\r\nimport HourglassEmptyRoundedIcon from '@material-ui/icons/HourglassEmptyRounded';\r\nimport { Link } from \"react-router-dom\";\r\nimport { JamNavbar } from '../cmps/JamDetailsNavbar';\r\n\r\nconst mapStyles = {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n};\r\n\r\n// const containerStyle = {\r\n//     position: 'static',  \r\n//     width: '100%',\r\n//     height: '100%'\r\n// }\r\n\r\n// const mapStyle = [\r\n//     {\r\n//         featureType: 'landscape.man_made',\r\n//         elementType: 'geometry.fill',\r\n//         stylers: [\r\n//             {\r\n//                 color: '#dceafa'\r\n//             }\r\n//         ]\r\n//     },\r\n//     {\r\n//         elementType: \"labels.text\",\r\n//         stylers: [\r\n//             {\r\n//                 visibility: \"off\"\r\n//             }\r\n//         ]\r\n//     },\r\n//     {\r\n//         featureType: \"road.highway\",\r\n//         elementType: \"labels\",\r\n//         stylers: [\r\n//             {\r\n//                 visibility: \"on\"\r\n//             }\r\n//         ]\r\n//     },\r\n//     {\r\n//         featureType: \"road.arterial\",\r\n//         elementType: \"labels.text\",\r\n//         stylers: [\r\n//             {\r\n//                 visibility: \"on\"\r\n//             }\r\n//         ]\r\n//     },\r\n//     {\r\n//         featureType: \"road.local\",\r\n//         elementType: \"labels.text\",\r\n//         stylers: [\r\n//             {\r\n//                 visibility: \"on\"\r\n//             }\r\n//         ]\r\n//     },\r\n// ]\r\nconst mapStyle = [\r\n    {\r\n        \"featureType\": \"administrative\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#6195a0\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"administrative.province\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"elementType\": \"geometry\",\r\n        \"stylers\": [\r\n            {\r\n                \"lightness\": \"0\"\r\n            },\r\n            {\r\n                \"saturation\": \"0\"\r\n            },\r\n            {\r\n                \"color\": \"#f5f5f2\"\r\n            },\r\n            {\r\n                \"gamma\": \"1\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape.man_made\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"lightness\": \"-3\"\r\n            },\r\n            {\r\n                \"gamma\": \"1.00\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape.natural.terrain\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi.park\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#bae5ce\"\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 45\r\n            },\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#fac9a9\"\r\n            },\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"labels.text\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#4e4e4e\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.arterial\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#787878\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.arterial\",\r\n        \"elementType\": \"labels.icon\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit.station.airport\",\r\n        \"elementType\": \"labels.icon\",\r\n        \"stylers\": [\r\n            {\r\n                \"hue\": \"#0a00ff\"\r\n            },\r\n            {\r\n                \"saturation\": \"-77\"\r\n            },\r\n            {\r\n                \"gamma\": \"0.57\"\r\n            },\r\n            {\r\n                \"lightness\": \"0\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit.station.rail\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#43321e\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit.station.rail\",\r\n        \"elementType\": \"labels.icon\",\r\n        \"stylers\": [\r\n            {\r\n                \"hue\": \"#ff6c00\"\r\n            },\r\n            {\r\n                \"lightness\": \"4\"\r\n            },\r\n            {\r\n                \"gamma\": \"0.75\"\r\n            },\r\n            {\r\n                \"saturation\": \"-68\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#eaf6f8\"\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#c7eced\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"lightness\": \"-49\"\r\n            },\r\n            {\r\n                \"saturation\": \"-53\"\r\n            },\r\n            {\r\n                \"gamma\": \"0.79\"\r\n            }\r\n        ]\r\n    }\r\n]\r\nclass _JamExplore extends Component {\r\n    state = {\r\n        markers: null,\r\n        userPos: null,\r\n        mapZoom: 14,\r\n        showingInfoWindow: false, // Hides or shows the InfoWindow\r\n        activeMarker: {}, // Shows the active marker upon click\r\n        selectedPlace: null, // Shows the InfoWindow to the selected place upon a marker\r\n        isPopupShow: false,\r\n        selectedJam: null\r\n    };\r\n\r\n    mapRef = React.createRef();\r\n    componentDidMount() {\r\n        this.props.loadJams()\r\n        navigator.geolocation.getCurrentPosition(pos => {\r\n            const userPos = { position: { lat: null, lng: null } }\r\n            userPos.position.lat = pos.coords.latitude\r\n            userPos.position.lng = pos.coords.longitude\r\n            this.setState({ selectedPlace: userPos, userPos: userPos })\r\n            return pos.coords\r\n        })\r\n        this.setState({ markers: this.displayMarkers() })\r\n    }\r\n\r\n    timeFormatter = () => {\r\n        return <p>\r\n            <span>{new Intl.DateTimeFormat('il', { month: 'short' }).format(new Date(this.state.selectedJam.startsAt))}</span><span>-</span>\r\n            <span>{new Date(this.state.selectedJam.startsAt).toLocaleString('he-IL', { day: '2-digit', hour: '2-digit', minute: '2-digit' })}</span>\r\n        </p>\r\n    }\r\n\r\n    onMarkerClick = (props, marker) => {\r\n        this.setState({\r\n            activeMarker: marker,\r\n            showingInfoWindow: true,\r\n            selectedPlace: props,\r\n            mapZoom: 17\r\n        });\r\n        this.setState({ isPopupShow: true, selectedJam: props.jam })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.jams !== prevProps.jams) {\r\n            this.setState({ markers: this.displayMarkers() });\r\n            if (this.state.activeMarker && this.state.activeMarker.position) {\r\n                this.setState({ selectedJam : this.props.jams.filter( (jam) => jam._id === this.state.activeMarker.jam._id )[0]});\r\n                /*this.setState({\r\n                    activeMarker: {...this.state.activeMarker , jam: this.props.jams.filter( (jam) => jam._id === this.state.activeMarker.jam._id )[0]}\r\n                });*/\r\n               \r\n            }\r\n          \r\n        }\r\n    }\r\n\r\n    onJamCenter = (jamId) => {\r\n        const marker = this.state.markers.find(marker => {\r\n            return marker.key === jamId\r\n        })\r\n        const props = marker.props\r\n        this.setState({\r\n            selectedPlace: props,\r\n            mapZoom: 17\r\n        });\r\n    }\r\n\r\n    onClose = props => {\r\n        if (this.state.showingInfoWindow) {\r\n            this.setState({\r\n                showingInfoWindow: false,\r\n                activeMarker: null\r\n            });\r\n        }\r\n    };\r\n    displayMarkers = () => {\r\n        return this.props.jams.map(jam => {\r\n            return <Marker key={jam._id}\r\n                position={{\r\n                    lat: jam.location.lat,\r\n                    lng: jam.location.lng\r\n                }}\r\n                onMousedown={this.onMarkerClick}\r\n                jam={jam}\r\n                title={jam.title}\r\n                imgUrl={jam.imgUrl}\r\n                currMembers={jam.usersGoing.length}\r\n                capacity={jam.capacity}\r\n                icon={{\r\n                    url: \"http://maps.google.com/mapfiles/ms/icons/purple-dot.png\",\r\n                    // url: jamMarker,\r\n                    anchor: new this.props.google.maps.Point(32, 32),\r\n                    scaledSize: new this.props.google.maps.Size(50, 50)\r\n                }}\r\n            />\r\n        });\r\n    }\r\n\r\n    //   centerMoved(mapProps, map) {\r\n    //       console.log(map.center.lat());\r\n\r\n    //   }\r\n    _mapLoaded(mapProps, map) {\r\n        map.setOptions({\r\n            styles: mapStyle\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { jams, loggedInUser } = this.props\r\n        const { userPos, selectedPlace, mapZoom, markers, isPopupShow } = this.state\r\n        const jam = this.state.selectedJam\r\n        if (!selectedPlace || jams.length === 0) {\r\n            return <div className=\"loader main-content pos-relative\">\r\n                <Loader type=\"Bars\" color=\"#00475F\" height={200} width={200} timeout={5000} />\r\n            </div>\r\n        }\r\n        return (\r\n            <>\r\n                <section className=\"flex explore-container pos-relative\">\r\n                    <button className=\"center-map-btn\" onClick={() => {\r\n                        const selectedPlaceCopy = { ...selectedPlace }\r\n                        selectedPlaceCopy.position.lat = userPos.position.lat\r\n                        selectedPlaceCopy.position.lng = userPos.position.lng\r\n                        this.setState({ selectedPlace: selectedPlaceCopy, mapZoom: 15 })\r\n                    }}><GpsFixedIcon style={{ fontSize: 40 }} /></button>\r\n                    <Map\r\n                        ref={this.mapRef}\r\n                        // containerStyle={containerStyle}\r\n                        google={this.props.google}\r\n                        zoom={mapZoom}\r\n                        style={mapStyles}\r\n                        // centerAroundCurrentLocation={true}\r\n                        initialCenter={{ lat: selectedPlace.position.lat, lng: selectedPlace.position.lng }}\r\n                        center={{ lat: selectedPlace.position.lat, lng: selectedPlace.position.lng }}\r\n                        onReady={(mapProps, map) => this._mapLoaded(mapProps, map)}\r\n                        disableDefaultUI={true}\r\n                    // onBoundsChanged={this.centerMoved}\r\n                    >\r\n                        {markers}\r\n                        {loggedInUser && <Marker\r\n                            name={'Your position'}\r\n                            position={userPos.position}\r\n                            icon={{\r\n                                url: loggedInUser.imgUrl,\r\n                                // anchor: new this.props.google.maps.Point(32, 32),\r\n                                scaledSize: new this.props.google.maps.Size(50, 50),\r\n                                origin: new this.props.google.maps.Point(0, 0),\r\n                                anchor: new this.props.google.maps.Point(17, 34),\r\n                            }}\r\n                        />}\r\n                        <InfoWindow\r\n                            marker={this.state.activeMarker}\r\n                            visible={this.state.showingInfoWindow}\r\n                            onClose={this.onClose}\r\n                        >\r\n                            <div>\r\n                                <h2>{this.state.selectedPlace.title}</h2>\r\n                            </div>\r\n                        </InfoWindow>\r\n                    </Map>\r\n                    {isPopupShow &&\r\n                        <div className=\"jam-popup\">\r\n                            <div className=\"details-con\">\r\n                                <div className=\"close-details\">\r\n                                    <h3 >{jam.title} </h3>\r\n                                    <span onClick={()=>this.setState({isPopupShow: false})}>&times;</span> \r\n                                </div>\r\n                                <div className=\"map-thumb-wrapper\" onClick={() => this.props.history.push(`jam/${jam._id}`)}>\r\n                                    <img src={jam.imgUrl} alt=\"jam-thumbnail\" />\r\n                                </div>\r\n                                <JamNavbar\r\n                                history={this.props.history}\r\n                                user={this.props.loggedInUser}\r\n                                jam={jam}\r\n                                updateJamGoing={this.props.updateJamGoing}\r\n                                isUserAdmin={false}\r\n                                showBasicActionsOnly={true}\r\n                                />\r\n                                <h3 className=\"title-style\">Details</h3>\r\n                                <p><span className=\"icon-style\"><HourglassEmptyRoundedIcon /></span><span className=\"details-style\">{jam.capacity - jam.usersGoing.length} Slots Available</span></p>\r\n                                <p><span className=\"icon-style\"><PeopleAltRoundedIcon /></span> <span className=\"details-style\">{jam.usersGoing.length} People going</span></p>\r\n                                <p><span className=\"icon-style\"><EmojiPeopleRoundedIcon /></span> <span className=\"details-style\">Created by <Link to={\"/user/\" + jam.createdBy._id} > {jam.createdBy.fullname}</Link></span></p>\r\n                                <p><span className=\"icon-style\"><RoomRoundedIcon /></span> <span className=\"details-style\">{jam.location.address}, {jam.location.city}</span></p>\r\n                                <p><span className=\"icon-style\"><AccessTimeRoundedIcon /></span> <span className=\"details-style\">{this.timeFormatter()}</span></p>\r\n                                <div className=\"description-con\">\r\n                                    <h3 className=\"title-style\">Description</h3>\r\n                                    <p>{jam.description}</p>\r\n                                </div>\r\n                                <ul className=\"jam-card-tags big-tags flex\">{jam.tags.map((tag, idx) => {\r\n                                    return <li key={idx}>{tag}</li>\r\n                                })}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </section>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        jams: state.jamModule.jams,\r\n        users: state.userModule.users,\r\n        loggedInUser: state.userModule.loggedInUser\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    loadJams,\r\n    loadUsers,\r\n    updateJamGoing\r\n};\r\n\r\nexport const JamExplore = GoogleApiWrapper({\r\n    apiKey: \"AIzaSyBTd-r9ES9me88-mTQasKgom191cNMihjY\",\r\n})(connect(mapStateToProps, mapDispatchToProps)(_JamExplore));\r\n\r\n{/* <div className=\"jams-explore-container\">\r\n                <div className=\"jams-explore-filter flex column\">\r\n                    <h1>Filter Jams</h1>\r\n                    <div className=\"filter-inputs\">\r\n                        <input type=\"text\" name=\"name\" id=\"\"/>\r\n                        <select name=\"filterByInst\">\r\n                            <option value=\"\">By Instrument Missing</option>\r\n                            <option value=\"\">Singer</option>\r\n                            <option value=\"\">Guitar</option>\r\n                            <option value=\"\">Drums</option>\r\n                            <option value=\"\">Bass</option>\r\n                            <option value=\"\">Keyboard</option>\r\n                        </select>\r\n                        <select name=\"filterByRegion\">\r\n                            <option value=\"\">By Region</option>\r\n                            <option value=\"\">North</option>\r\n                            <option value=\"\">Center</option>\r\n                            <option value=\"\">South</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <ul className=\"jams-explore-list\">\r\n                    {jams.map((jam) => (\r\n                        <JamPreview key={jam._id} jam={jam}/>\r\n                    ))}\r\n                </ul>\r\n            </div> */}","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\JamCreate.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\MembersList.jsx",["218"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { UserList } from '../cmps/UserList'\r\nimport { loadUsers } from '../store/actions/userActions'\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nclass _MembersList extends Component {\r\n\r\n    state = {\r\n        filterBy: {\r\n            username: '',\r\n            fullname: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.loadUsers()\r\n    }\r\n\r\n    // handleChange = (ev) => {\r\n    //     const filterBy = { ...this.state.filterBy };\r\n    //     filterBy[ev.target.name] = ev.target.value;\r\n    //     this.setState({ filterBy }, ()=> {\r\n    //         this.props.loadUsers(this.state.filterBy)\r\n    //     });\r\n    // };\r\n    onHandleInputChange = ({ target }) => {\r\n        const field = target.name\r\n        // let value = (target.type === 'number') ? +target.value : target.value\r\n\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                filterBy: {\r\n                    ...prevState.filterBy,\r\n                    [field]: target.value\r\n                }\r\n            }\r\n        }, () => {\r\n            const { filterBy } = this.state\r\n            this.props.loadUsers(filterBy)\r\n        })\r\n    }\r\n\r\n\r\n\r\n    onSetFilter = (ev) => {\r\n        ev.preventDefault();\r\n        // const { filterBy } = this.state\r\n        this.props.loadUsers(this.state.filterBy)\r\n    }\r\n\r\n    render() {\r\n        const { users } = this.props\r\n        const { username, fullname } = this.state.filterBy\r\n        if (!users) {\r\n            return <div className=\"loader main-content pos-relative\">\r\n                <Loader type=\"Bars\" color=\"#00475F\" height={200} width={200} timeout={5000} />\r\n            </div>\r\n        }\r\n        return (\r\n            <section>\r\n                <div className=\"search-area flex justify-center\">\r\n                    <div className=\"input-box\">\r\n                        <SearchRoundedIcon className=\"search-icon\" />\r\n                        <form onSubmit={this.onSetFilter}>\r\n                            <input name=\"username\"\r\n                                type=\"text\"\r\n                                id=\"username\"\r\n                                className=\"fs18\"\r\n                                placeholder=\"Looking for someone?\"\r\n                                value={username}\r\n                                onChange={this.onHandleInputChange} />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"members-container\">\r\n                    <UserList users={users} />\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        //   jams: state.jamModule.jams,\r\n        users: state.userModule.users,\r\n        filterBy: state.userModule.filterBy\r\n        // loggedInUser: state.userModule.loggedInUser\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    // loadJams,\r\n    loadUsers,\r\n}\r\n\r\nexport const MembersList = connect(mapStateToProps, mapDispatchToProps)(_MembersList)\r\n","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\MainNav.jsx",["219"],"import { withRouter, NavLink, Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { logout } from '../store/actions/userActions.js'\r\nimport React, { Component } from 'react'\r\nimport { mainNavService } from '../services/mainNavService.js'\r\nimport logoM from \"../assets/img/logo-m.png\"\r\nimport { socketService } from '../services/socketService'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass _MainNav extends Component {\r\n\r\n\r\n    componentDidMount() {\r\n        if (this.props.loggedInUser) {\r\n            socketService.setup()\r\n            socketService.emit('user connection', this.props.loggedInUser._id);\r\n            socketService.on('send',this.sendInvite)\r\n            \r\n        }\r\n        mainNavService.setHomePageNavStyle()\r\n    }\r\n\r\n    sendInvite = (data)=> {\r\n        const Invite = ()=> {\r\n            return <div>\r\n                <h3>{data.msg}</h3>\r\n                <Link to={data.link}>Go To The Jam!</Link>\r\n            </div>\r\n        }\r\n        toast(<Invite/>, {\r\n            position: \"top-right\",\r\n            autoClose: 10000,\r\n            hideProgressBar: true,\r\n            closeOnClick: false,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            });\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        if (this.props.loggedInUser){\r\n            socketService.off('user connection', this.props.loggedInUser._id)\r\n            socketService.off('send',this.func)\r\n            socketService.terminate()\r\n            clearTimeout(this.timeout)\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        // let {locationPathName }= this.props.location.pathname\r\n        if( this.props.location.pathname !== '/'){\r\n            mainNavService.setNavStyle()\r\n        }else{\r\n            mainNavService.setHomePageNavStyle()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { loggedInUser } = this.props;\r\n        return (\r\n            <>\r\n            <nav className=\"navbar flex\">\r\n                <div className=\"nav-links\">\r\n                    <NavLink to=\"/\" className=\"top-nav-logo\"><img src={logoM} alt=\"logo\"/></NavLink>\r\n                    <NavLink to=\"/search\">Jams</NavLink>\r\n                    <NavLink to=\"/members\">Members</NavLink>\r\n                </div>\r\n                <div className=\"user-nav\">\r\n                    {loggedInUser ? <NavLink className=\"user-avater-link\" to=\"/user\">\r\n                        <div className=\"avatar-wrapper pdding\">\r\n                            <img src={loggedInUser.imgUrl} />\r\n                        </div>\r\n                    </NavLink>\r\n                    :\r\n                    <NavLink to=\"/login\">Login</NavLink>}\r\n                </div>\r\n            </nav>\r\n            <ToastContainer/>\r\n            </>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.userModule.loggedInUser\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    logout\r\n}\r\n\r\n\r\nexport const MainNav = withRouter(connect(mapStateToProps, mapDispatchToProps)(_MainNav))\r\n\r\n\r\n// idan raichel id 6005e093bf4a64698823123e\r\n// tomer id 6005e093bf4a646988231239","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\Home.jsx",["220","221"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { loadJams } from '../store/actions/jamActions.js'\r\nimport { loadUsers } from '../store/actions/userActions.js'\r\nimport { UserList } from '../cmps/UserList.jsx'\r\nimport { JamScroll } from '../cmps/JamScroll.jsx'\r\nimport { HeroSection } from '../cmps/HeroSection.jsx'\r\nimport Loader from 'react-loader-spinner'\r\nimport { Link } from 'react-router-dom'\r\nimport { JamList } from '../cmps/JamList.jsx'\r\nimport recordlogo from \"../assets/img/recordlogo.png\"\r\n\r\nclass _Home extends Component {\r\n  state = {}\r\n\r\n  componentDidMount() {\r\n    this.props.loadJams()\r\n    this.props.loadUsers()\r\n  }\r\n\r\n  getUpcomingJams = ()=> {\r\n    return this.props.jams.filter(jam => {\r\n      const weekFromNow = new Date().getTime()+86400000*7\r\n      return jam.startsAt > Date.now() && jam.startsAt < weekFromNow\r\n    })\r\n  }\r\n\r\n  getPopularJams = () => {\r\n    return this.props.jams.filter(jam => {\r\n      // const slotsLeft = jam.capacity - jam.usersGoing.length\r\n      const weekAgo = new Date().getTime()-86400000*7\r\n      return jam.createdAt < Date.now() && jam.createdAt > weekAgo\r\n    })\r\n  }\r\n\r\n  getFeaturedMembers = ()=> {\r\n    return this.props.users.slice(0,6)\r\n  }\r\n\r\n  render() {\r\n    const { jams, users } = this.props\r\n    if (jams.length === 0 || users.length === 0) \r\n      return  <div className=\"loader main-content pos-relative\">\r\n                <Loader type=\"Bars\" color=\"#00475F\" height={200} width={200} timeout={5000} />\r\n              </div>\r\n    return ( \r\n      <div className=\"home\">\r\n        <HeroSection/>\r\n        <main className=\"main-content zebra-container flex column space-between\">\r\n          <div className=\"jams section\">\r\n              <div className=\"title-row\">\r\n                <h1 className=\"staatliches\">Added Recently &gt;&gt;&gt;</h1>\r\n                <Link to=\"/search\">Explore</Link>\r\n              </div>\r\n              <div className=\"carousel-container\">\r\n                <JamScroll jams={this.getPopularJams()} />\r\n              </div>\r\n          </div>\r\n          <div className=\"jams section\">\r\n          <div className=\"title-row\">\r\n                <h1 className=\"staatliches\">Upcoming This Week &gt;&gt;&gt;</h1>\r\n                <Link to=\"/search\">Explore</Link>\r\n              </div>\r\n              <div className=\"carousel-container\">\r\n              <JamScroll jams={this.getUpcomingJams()} />\r\n              </div>\r\n          </div>\r\n\r\n          <div className=\"members-container section\">\r\n            <div className=\"title-row\">\r\n                <h1 className=\"staatliches\"> Featured Members &gt;&gt;&gt;</h1>\r\n                <Link to=\"/members\">See All</Link>\r\n            </div>\r\n            <div className=\"carousel-container\">\r\n            <UserList users={this.getFeaturedMembers()}/>\r\n            </div>\r\n          </div>\r\n        </main>\r\n        <footer className=\"flex column align-center\">\r\n          <img className=\"footer-logo\" src={recordlogo}/>\r\n          <small>All RIGHT RESERVED TO JAMEET 2021&copy;</small>\r\n        </footer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    jams: state.jamModule.jams,\r\n    users: state.userModule.users,\r\n    loggedInUser: state.userModule.loggedInUser\r\n  }\r\n}\r\nconst mapDispatchToProps = {\r\n  loadJams,\r\n  loadUsers,\r\n  // sendMsg\r\n}\r\n\r\nexport const Home = connect(mapStateToProps, mapDispatchToProps)(_Home)\r\n","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\UserProfile.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\JamDetails.jsx",["222"],"import React, { Component } from 'react'\r\nimport { jamService } from '../services/jamService'\r\n// import RoomRoundedIcon from '@material-ui/icons/RoomRounded';\r\nimport AccessTimeRoundedIcon from '@material-ui/icons/AccessTimeRounded';\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\r\nimport EmojiPeopleRoundedIcon from '@material-ui/icons/EmojiPeopleRounded';\r\n// import { MapContainer } from '../cmps/MapContainer';\r\nimport { JamUserPreview } from '../cmps/JamUserPreview';\r\nimport { utilService } from '../services/utilService';\r\nimport { Link } from 'react-router-dom';\r\nimport { JamNavbar } from '../cmps/JamDetailsNavbar';\r\nimport JamGoingListModal from '../cmps/JamGoingModal';\r\nimport { connect } from 'react-redux';\r\nimport { updateJamGoing, loadJams, saveJam } from '../store/actions/jamActions.js';\r\nimport {StaticMap} from '../cmps/StaticMap'\r\n// import { jamGoingListModal } from '../cmps/JamGoingModal'\r\n// import { loadJams } from '../store/actions/jamActions'\r\nimport HourglassEmptyRoundedIcon from '@material-ui/icons/HourglassEmptyRounded';\r\nimport RoomOutlinedIcon from '@material-ui/icons/RoomOutlined';\r\nimport Loader from 'react-loader-spinner';\r\nimport { JamChat } from '../cmps/JamChat';\r\n\r\nconst emptyJam = {\r\n    title: \"\",\r\n    description: \"\",\r\n    imgUrl: \"http://some-img\",\r\n    capacity: null,\r\n    location: {\r\n        region: \"\",\r\n        city: \"\",\r\n        address: \"\",\r\n        lat: null,\r\n        lng: null\r\n    },\r\n    createdBy: {},\r\n    startsAt: null,\r\n    tags: [],\r\n    createdAt: null,\r\n    usersGoing: []\r\n}\r\n\r\nclass _JamDetails extends Component {\r\n    state = {\r\n        jam: null,\r\n        isUserAdmin: false,\r\n        isEditMode: false\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        window.scrollTo(0,0)\r\n        this.props.loadJams()\r\n        if (this.props.isEditMode) {\r\n            this.setState({ jam: emptyJam, isEditMode: true, isUserAdmin: true })\r\n        }\r\n        else {\r\n            const jam = await jamService.getById(this.props.match.params.id);\r\n            this.setState({ jam }, () => {\r\n                this.checkIfUserHost()\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        if (props.isSubmit) {\r\n            const miniUser = {}\r\n            miniUser._id = this.props.loggedInUser._id\r\n            miniUser.fullname = this.props.loggedInUser.fullname\r\n            miniUser.imgUrl = this.props.loggedInUser.imgUrl\r\n            miniUser.playing = this.props.loggedInUser.talents\r\n            // this.props.saveJam(this.state.jam, miniUser)\r\n            this.props.jamSaved()\r\n        }\r\n        this.setState({ jam: props.jam })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.state.isEditMode) return\r\n        if (this.props.jams !== prevProps.jams) {\r\n            this.setState({ jam: this.props.jams.find(jam => jam._id === this.props.match.params.id) });\r\n        }\r\n    }\r\n\r\n    checkIfUserHost = () => {\r\n        if (!this.props.loggedInUser) return\r\n        if (this.props.loggedInUser._id === this.state.jam.createdBy._id) {\r\n            this.setState({ isUserAdmin: true })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { jam, isEditMode, isUserAdmin } = this.state\r\n        return (\r\n            <section className=\"jam-details\">\r\n                {!this.state.jam && <div className=\"loader main-content pos-relative\">\r\n                    <Loader type=\"Bars\" color=\"#00475F\" height={200} width={200} timeout={5000} />\r\n                </div>}\r\n                {this.state.jam &&\r\n                    <div className=\"page-con main-container\">\r\n                        \r\n                        <div className=\"jam-top full\" >\r\n                             <div className=\"jam-image\" style={{\r\n                                 backgroundImage: 'url('+ this.state.jam.imgUrl +')'                     \r\n                             }} ></div>\r\n                            \r\n                        </div>\r\n                        <h1 className=\"jam-title\">{this.state.jam.title}</h1>\r\n                        {!this.state.isEditMode && <div>\r\n                            <JamNavbar\r\n                                history={this.props.history}\r\n                                user={this.props.loggedInUser}\r\n                                jam={this.state.jam}\r\n                                updateJamGoing={this.props.updateJamGoing}\r\n                                isUserAdmin={this.state.isUserAdmin}\r\n                            />\r\n                        </div>}\r\n                        <div className=\"page-content\">\r\n                            <div className=\"left-page-details\">\r\n                                <div className=\"details-con\">\r\n                                    <h3 className=\"title-style\">Details</h3>\r\n                                    <p><span className=\"icon-style\"><HourglassEmptyRoundedIcon /></span><span className=\"details-style\">{this.state.jam.capacity - this.state.jam.usersGoing.length} Slots Available</span></p>\r\n                                    <p><span className=\"icon-style\"><PeopleAltRoundedIcon /></span> <span className=\"details-style\">{this.state.jam.usersGoing.length} People going</span></p>\r\n                                    {!isEditMode && <p><span className=\"icon-style\"><EmojiPeopleRoundedIcon /></span> <span className=\"details-style\">Created by <Link to={\"/user/\" + this.state.jam.createdBy._id} > {this.state.jam.createdBy.fullname}</Link></span></p>}\r\n                                    <p><span className=\"icon-style\"><RoomOutlinedIcon /></span> <span className=\"details-style\">{this.state.jam.location.address}, {this.state.jam.location.city}</span></p>\r\n                                    <p><span className=\"icon-style\"><AccessTimeRoundedIcon /></span> <span className=\"details-style\">{utilService.getFormattedDate(this.state.jam.startsAt)}</span></p>\r\n                                    <div className=\"description-con\">\r\n                                        <h3 className=\"title-style\">Description</h3>\r\n                                        <p>{this.state.jam.description}</p>\r\n                                    </div>\r\n                                        <ul className=\"jam-card-tags big-tags flex\">{jam.tags.map((tag, idx) => {\r\n                                            return <li key={idx}>{tag}</li>\r\n                                        })}\r\n                                        </ul>\r\n                                 \r\n                                </div>\r\n                                {!this.state.isEditMode && <div className=\"wall-container\">\r\n                                        <h3 className=\"title-style\">Jam Wall</h3>\r\n                                        <JamChat jamId={jam._id} msgs={jam.msgs} jam={jam}/>\r\n                                    </div>} \r\n                            </div>\r\n                            <div className=\"left-page-con\">\r\n                            <div className=\"location-con\">\r\n                                    <h3 className=\"title-style\">Location</h3>\r\n                                    {/* <div><MapContainer lat={this.state.jam.location.lat} lng={this.state.jam.location.lng} /></div> */}\r\n                                    <div><StaticMap lat={this.state.jam.location.lat} lng={this.state.jam.location.lng}/></div>\r\n                                </div>\r\n                                {!isEditMode && <div className=\"users-going-con-section\">\r\n                                    <ul className=\"users-going-con\">\r\n                                        {this.state.jam.usersGoing.slice(0, 3).map(function (user, index) {\r\n                                            return <JamUserPreview key={index} user={user} />\r\n                                        })}\r\n\r\n                                    </ul>\r\n                                    <div className=\"users-going-actions\"> <JamGoingListModal usersGoing={this.state.jam.usersGoing} /> </div>\r\n                                    \r\n                                </div>}\r\n                            \r\n                            </div>\r\n                        </div>\r\n                    </div>}\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.userModule.loggedInUser,\r\n        jams: state.jamModule.jams\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    loadJams,\r\n    saveJam,\r\n    updateJamGoing\r\n}\r\n\r\nexport const JamDetails = connect(mapStateToProps, mapDispatchToProps)(_JamDetails)","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\reducers\\index.js",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\UserSection.jsx",["223","224"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { loadUsers } from \"../store/actions/userActions\";\r\nimport { loadJams } from \"../store/actions/jamActions\";\r\nimport { UserInfo } from \"../cmps/UserProfile/UserInfo\";\r\nimport { UserTalents } from \"../cmps/UserProfile/UserTalents\";\r\nimport { JamList } from \"../cmps/JamList\";\r\nimport { UserList } from \"../cmps/UserList\";\r\nimport { JamCreate } from \"./JamCreate\";\r\nimport { JamScroll } from \"../cmps/JamScroll\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nclass _UserSection extends Component {\r\n\r\n    state = {\r\n        activeTab : 'events'\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.loadJams()\r\n        this.props.loadUsers()\r\n    }\r\n\r\n    onTabChoose = (tab)=> {\r\n        this.setState({activeTab: tab})\r\n    }\r\n\r\n    filterJamsByInst = () => {\r\n        return this.props.jams.filter((jam) => {\r\n            const user = jam.usersGoing.find((user) => {\r\n                return user.playing.some((inst) => {\r\n                    return inst === this.props.loggedInUser.talents[0];\r\n                });\r\n            });\r\n            if (!user) return jam;\r\n        });\r\n    };\r\n\r\n    filterMembersByFollow = () => {\r\n        return this.props.users.filter((user) => {\r\n            return user.followers.find(\r\n                (user) => user._id === this.props.loggedInUser._id\r\n            );\r\n        });\r\n    };\r\n\r\n    filterJamsByRegion = () => {\r\n        return this.props.jams.filter((jam) => {\r\n            return (\r\n                jam.location.region === this.props.loggedInUser.location.region\r\n            );\r\n        });\r\n    };\r\n\r\n    filterUserCreatedJams = () => {\r\n        return this.props.jams.filter(jam => jam.createdBy._id === this.props.loggedInUser._id)\r\n    }\r\n\r\n    render() {\r\n        const { jams, loggedInUser } = this.props\r\n        const { activeTab } = this.state\r\n        if (jams.length === 0 )  {\r\n             return <div className=\"loader main-content pos-relative\">\r\n             <Loader type=\"Bars\" color=\"#00475F\" height={200} width={200} timeout={5000} />\r\n           </div>\r\n        }\r\n        return (\r\n            \r\n            <main className=\"main-content user-section flex\">\r\n                <div className=\"user-details-aside flex column\">\r\n                    <UserInfo user={loggedInUser} isUserAdmin={true} />\r\n                    <UserTalents user={loggedInUser} isUserAdmin={true} />\r\n                    <button onClick={()=>this.onTabChoose('create')}>Start A New Jam</button>\r\n                </div>\r\n                <div className=\"filtered-jams section\">\r\n                    <div className=\"user-section-toolbar\">\r\n                        <ul className=\"toolbar-left\">\r\n                            <li onClick={()=>this.onTabChoose('events')} className={activeTab === 'events' ? 'active' : ''}>Explore Jams</li>\r\n                            <li onClick={()=>this.onTabChoose('members')} className={activeTab === 'members' ? 'active' : ''}>Members</li>\r\n                            <li onClick={()=>this.onTabChoose('manage')} className={activeTab === 'manage' ? 'active' : ''}>Manage Your Jams</li>\r\n                        </ul>\r\n                        \r\n                        \r\n                    </div>\r\n                   {activeTab === 'events' && <div>\r\n                        <h1>Jams Without {loggedInUser.talents[0]}</h1>\r\n                        <JamList jams={this.filterJamsByInst()} />\r\n                        <h1>Jams Around {loggedInUser.location.region} Region</h1>\r\n                        <JamList jams={this.filterJamsByRegion()} />\r\n                    </div>}\r\n                    {activeTab === 'members' && <div>\r\n                        <h1>Members You Follow</h1>\r\n                        <UserList users={this.filterMembersByFollow()}/>\r\n                    </div>}\r\n                    {activeTab === 'manage' && this.filterUserCreatedJams().length > 0 && \r\n                        <div>\r\n                            <h1>Jams Dashboard</h1>\r\n                            <JamList users={this.this.filterUserCreatedJams()}/>\r\n                    </div>}\r\n                    {activeTab === 'manage' && <h1>You haven't created any jams yet... </h1>\r\n                    }\r\n                    {activeTab === 'create' &&\r\n                        <div>\r\n                            <JamCreate/>\r\n                        </div>\r\n                    }\r\n                </div>\r\n          </main>\r\n       )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        jams: state.jamModule.jams,\r\n        users: state.userModule.users,\r\n        loggedInUser: state.userModule.loggedInUser,\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    loadJams,\r\n    loadUsers,\r\n};\r\n\r\nexport const UserSection = connect(mapStateToProps, mapDispatchToProps)(_UserSection);","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamList.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\LoaderSpinner.jsx",[],["225","226"],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\actions\\userActions.js",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamScroll.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\services\\mainNavService.js",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamPreview.jsx",["227","228"],"import LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport {instIcons} from '../assets/img/inst-icons/icons.js'\r\nimport { Link } from \"react-router-dom\";\r\nimport LocationOnOutlinedIcon from '@material-ui/icons/LocationOnOutlined';\r\nexport function JamPreview({ jam }) {\r\n\r\n    function showIcons (){\r\n\r\n        return instIcons.map((icon, idx)=>{\r\n            const user = jam.usersGoing.find(user => {\r\n                return user.playing.some(inst=>{\r\n                    const instName = Object.keys(icon)[0]\r\n                    return instName === inst\r\n                })\r\n            })\r\n            if (user) return <div key={idx} className=\"inst-icon\">\r\n                <img src={Object.values(icon)[0]} alt=\"instrument\"/>\r\n            </div>\r\n        })\r\n    }\r\n    const slotsLeft = jam.capacity - jam.usersGoing.length\r\n    \r\n    return (\r\n        <Link to={`/jam/${jam._id}`}><li className=\"jam-card flex column\">\r\n            <div className=\"thumb-wrapper flex column pos-relative\">\r\n                <img className=\"jam-thumb\"  src={jam.imgUrl} alt=\"jam-thumbnail\"/>\r\n                <div className=\"inst-icons-wrapper\">\r\n                    {showIcons()}\r\n                </div>\r\n            </div>\r\n            {/* <h2>{jam.title}</h2> */}\r\n            <div className=\"jam-card-content flex\">\r\n                {/* <div className=\"date-wrapper\">\r\n                    <div className=\"date-month\">\r\n                        {new Intl.DateTimeFormat('il', { month: 'short' }).format(new Date(jam.startsAt))}\r\n                    </div>\r\n                    <div className=\"date-day\">\r\n                        \r\n                        {new Date(jam.startsAt).toLocaleString('he-IL',{day: '2-digit'})}\r\n                    </div>\r\n                </div> */}\r\n                <div className=\"jam-details-wrapper\">    \r\n                <h2>{jam.title}</h2>     \r\n                    <ul className=\"jam-card-tags flex \">{jam.tags.map((tag, idx) => {\r\n                        return <li key={idx}>{tag}</li> })}\r\n                    </ul>\r\n                    <div className=\"going-wrapper flex\">\r\n                        <div className=\"align-self\">\r\n                            <p className=\"gray-dark\"><LocationOnOutlinedIcon style={{ fontSize: 15 }}/>{jam.location.city}</p>\r\n                        </div>\r\n                        <span className={slotsLeft < 5 ? 'red' : 'green'}>\r\n                                {jam.usersGoing.length}/{jam.capacity} Slots\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </li></Link> \r\n    );\r\n}","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\services\\authService.js",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\actions\\jamActions.js",["229"],"import { jamService } from '../../services/jamService'\r\n\r\nexport function loadJams() {\r\n  return async dispatch => {\r\n    try {\r\n      const jams = await jamService.query()\r\n      dispatch({ type: 'SET_JAMS', jams })\r\n\r\n    } catch (err) {\r\n      console.log('JamActions: err in loadJams', err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function saveJam(jam, creatingUser) {\r\n  return async dispatch => {\r\n    try {\r\n      jam.createdAt = Date.now()\r\n      jam.createdBy = creatingUser\r\n      jam.usersGoing.push(creatingUser)\r\n      console.log(creatingUser);\r\n      \r\n      jam = await jamService.save(jam)\r\n      dispatch({ type: 'ADD_JAM', jam })\r\n    } catch (err) {\r\n      console.log('JamActions: err in saveJam', err)\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nexport function updateJamGoing(jam, user, isGoing) {\r\n  return async dispatch => {\r\n    try {\r\n     jamService.updateJamGoing(jam._id, user._id, isGoing);\r\n      if (isGoing) {\r\n        dispatch({ type: 'UPDATE_JAM_IS_GOING', data:  {jam: jam, user: user} });\r\n      } else {\r\n        dispatch({ type: 'UPDATE_JAM_IS_NOT_GOING', data:  {jam: jam, user: user} });\r\n      }\r\n     \r\n\r\n    } catch (err) {\r\n      console.log('JamActions: err in loadJams', err)\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction makeId(length = 6) {\r\n  var txt = '';\r\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n  for (var i = 0; i < length; i++) {\r\n      txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  }\r\n\r\n  return txt;\r\n}","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\HeroSection.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\UserList.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\services\\userService.js",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\services\\utilService.js",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\reducers\\reviewReducer.js",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\reducers\\systemReducer.js",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\reducers\\userReducer.js",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\store\\reducers\\jamReducer.js",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamCreateForm.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\assets\\img\\inst-icons\\icons.js",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\services\\jamService.js",["230"],"import { httpService } from './httpService'\r\n// import { storageService } from './asyncStorageService'\r\nimport userService from './userService'\r\n// import { utilService } from './utilService'\r\n// import { userService } from './userService'\r\n\r\nexport const jamService = {\r\n    query,\r\n    getById,\r\n    updateJamGoing,\r\n    save\r\n}\r\n\r\nfunction query() {\r\n    // var queryStr = (!filterBy) ? '' : `?name=${filterBy.name}&sort=${sortBy}`\r\n    return httpService.get(`jam`)\r\n    // return jams;\r\n}\r\n\r\nfunction save(jam) {\r\n    return httpService.post(`jam`, jam)\r\n}\r\n\r\nfunction getById(jamId) {\r\n    // return jams.find(jam => jam._id === jamId)\r\n    // return storageService.get('jam', jamId)\r\n    return httpService.get(`jam/${jamId}`)\r\n}\r\n\r\n\r\nfunction updateJamGoing(jamId, user, isGoing) {\r\n    //UPDATE THE SERVER USER IS NOT GOING\r\n    // jams.find(jam => jam._id === jamId).usersGoing.push(user);\r\n     return httpService.put(`jam/${jamId}/isGoing`, {user:  {_id: user._id, fullname: user.fullname, imgUrl: user.imgUrl, playing: user.playing} , isGoing: isGoing})\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\UserPreview.jsx",["231","232","233"],"import { useHistory } from \"react-router-dom\";\r\nimport {instIcons} from '../assets/img/inst-icons/icons.js'\r\nimport LocationOnOutlinedIcon from '@material-ui/icons/LocationOnOutlined';\r\nexport function UserPreview({ user }) {\r\n\r\n    function showIcons() {\r\n        return instIcons.map((icon, idx)=>{\r\n            const talent = user.talents.find(talent=>{\r\n                return (talent === Object.keys(icon)[0])\r\n            })\r\n            if (talent) return <img key={idx} className=\"user-inst-icon\" src={Object.values(icon)[0]} alt=\"instrument\"/>\r\n        })\r\n    }\r\n\r\n    const history = useHistory()\r\n    return (\r\n        <li className=\"user-card flex column\" onClick={()=>history.push(`/user/${user._id}`)}>\r\n            <div className=\"thumb flex column pos-relative\">\r\n                <div className=\"img-wrapper flex justify-center\">\r\n                    <img className=\"user-card thumb\" src={user.imgUrl} className=\"userThumb\" alt=\"user-thumbnail\"/>\r\n                    <div className=\"user-inst-icons-wrapper\">\r\n                        {showIcons()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"user-card-content flex column\">\r\n                <h2>{user.username}</h2>\r\n                <ul className=\"user-card-tags flex\">{user.tags.map((tag, idx) => {\r\n                    if (idx < 3) return <li key={idx}>{tag}</li> })}\r\n                </ul>\r\n                <p className=\"gray\"><LocationOnOutlinedIcon/>{user.location.city}</p>\r\n            </div>\r\n        </li>\r\n    );\r\n}","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamUserPreview.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\MapContainer.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\UserProfile\\UserTalents.jsx",["234"],"export function UserTalents({user}) {\r\n    return (\r\n        <div className=\"user-right-box flex column\">\r\n            <div className=\"top-card\">\r\n              <h1>Talents</h1>\r\n            <div className=\"user-talents\">\r\n              <ul className=\"flex column\">{user.talents.map((talent, idx) => {\r\n                return <li key={idx}>{talent}</li>\r\n              })}</ul>\r\n            </div>\r\n            </div>\r\n               <div className=\"followers bottom-card\">\r\n                <h1>Followers</h1>\r\n              {user.followers.map((follower, idx) => {\r\n                return <img className=\"follower-avatar\" src={follower.imgUrl} key={idx} />\r\n              })}\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamGoingModal.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamDetailsNavbar.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\UserProfile\\UserInfo.jsx",["235","236","237"],"import ChatRoundedIcon from '@material-ui/icons/ChatRounded';\r\nimport FavoriteBorderRoundedIcon from '@material-ui/icons/FavoriteBorderRounded';\r\nimport LocationOnOutlinedIcon from '@material-ui/icons/LocationOnOutlined';\r\nimport FavoriteRoundedIcon from '@material-ui/icons/FavoriteRounded';\r\nimport AddRoundedIcon from '@material-ui/icons/AddRounded';\r\nimport { useHistory } from 'react-router';\r\n\r\n\r\nexport function UserInfo({user, followToggle, onFollowIconClick, isUserAdmin}) {\r\n    const history = useHistory()\r\n    return (\r\n        <div className=\"user-left-box flex column\">\r\n            <div className=\"user-basic-info flex\">\r\n                <div className=\"user-img\">\r\n                    <img src={user.imgUrl} />\r\n                </div>\r\n                <div className=\"user-tags-name flex column\">\r\n                    <span className=\"user-stage-name fs30\">{user.username}</span>\r\n                    <div className=\"user-location\">\r\n                    <LocationOnOutlinedIcon style={{ fontSize: 15 }} className=\"location-icon\" />\r\n                    <span>{user.location.city}</span>\r\n                    </div>\r\n                    <ul className=\"user-tags flex\">{user.tags.map((tag, idx) => {\r\n                            return <li key={idx}>{tag}</li> })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <div className=\"user-about\">\r\n                <span>{user.about}</span>\r\n            </div>\r\n            {!isUserAdmin && <div className=\"reaction-icon\">\r\n                <ChatRoundedIcon style={{fontSize: 40}}/>\r\n                {!followToggle ? <FavoriteBorderRoundedIcon style={{fontSize: 40}} onClick={()=>onFollowIconClick()}/>\r\n                : <FavoriteRoundedIcon style={{fontSize: 40}} onClick={()=>onFollowIconClick()}/>}  \r\n            </div>}\r\n        </div>\r\n        \r\n    )\r\n}","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\services\\httpService.js",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\LoginModal.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\InviteModal.jsx",["238"],"import { connect } from 'react-redux'\r\nimport ReactModal from 'react-modal';\r\nimport React from 'react';\r\nimport { FriendsInvitePreview } from './InviteFriends'\r\nimport { socketService } from '../services/socketService'\r\n\r\nclass _InviteModal extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            showModal: false,\r\n            selectAll: false,\r\n            following: [],\r\n            invited: []\r\n        };\r\n\r\n        this.handleOpenModal = this.handleOpenModal.bind(this);\r\n        this.handleCloseModal = this.handleCloseModal.bind(this);\r\n    }\r\n\r\n    handleOpenModal() {\r\n        this.setState({\r\n            showModal: true\r\n        });\r\n    }\r\n\r\n    handleCloseModal() {\r\n        this.props.handleCloseModal()\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.showModal!==this.state.showModal){\r\n          this.setState({showModal: nextProps.showModal });\r\n        }\r\n        if(nextProps.following!==this.state.following){\r\n            this.setState({following: nextProps.following.map((following) => {\r\n                return {...following,  isChecked: false};\r\n            })})\r\n          }\r\n      }\r\n    componentDidMount() {\r\n        const {invited} = this.state\r\n        document.addEventListener('keyup', (e) => {\r\n            if (e.keyCode === 27) this.handleCloseModal();\r\n        });\r\n        if (this.props.loggedInUser){\r\n            socketService.setup()\r\n            socketService.emit('user connection', this.props.loggedInUser._id);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        if (this.props.loggedInUser){\r\n            socketService.off('user connection', this.props.loggedInUser._id)\r\n            clearTimeout(this.timeout)\r\n        }\r\n    }\r\n\r\n    handleChange(user, invited) {\r\n        if (invited) {\r\n            let joined = this.state.invited.concat(user)\r\n            this.setState({invited: joined})\r\n        } else {\r\n            let removed = this.state.invited.filter( (userInvited)=> userInvited._id !== user._id)\r\n            this.setState({invited: removed})\r\n        }\r\n    }\r\n\r\n    selectAll () {\r\n        this.setState( {following: this.state.following.map((following) => {\r\n            return {...following, isChecked: true};\r\n        }), invited: this.state.following.slice()});\r\n    }\r\n    sendInvites() {\r\n        const link = `jam/${this.props.jamId}`\r\n        const msg = \r\n            `${this.props.loggedInUser.username} \r\n            has invited you to ${this.props.jamTitle}!!!`\r\n\r\n        this.state.invited.forEach(user=>{\r\n            console.log(user._id);\r\n            socketService.emit('user connection', user._id);\r\n            socketService.emit('invite', { msg, link })\r\n            socketService.emit('user connection', this.props.loggedInUser._id);\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        const customStyles = {\r\n            content: {\r\n                top: '50%',\r\n                left: '50%',\r\n                right: 'auto',\r\n                bottom: 'auto',\r\n                marginRight: '-50%',\r\n                transform: 'translate(-50%, -50%)',\r\n                width: '550px',\r\n                height: '450px'\r\n                \r\n             \r\n\r\n            }\r\n        };\r\n        return (\r\n                <ReactModal\r\n                    isOpen={this.state.showModal}\r\n                    contentLabel=\"invite-modal\"\r\n                    style={customStyles}\r\n                    closeOnEsc={true}\r\n                    ariaHideApp={false}\r\n                >\r\n                    <button className=\"esc-btn-modal\" onClick={this.handleCloseModal}>X</button>\r\n                    <div className=\"invite-modal-title\">\r\n                    <h2>Invite Your Friends!</h2>\r\n                    </div>\r\n                    {/* <input type=\"checkbox\" name=\"select-all-box\" id=\"select-all-box\"></input>\r\n                    <label for=\"select-all-box\">Select All</label> */}\r\n                    <button className=\"select-all-btn\" onClick={() => this.selectAll()}>Select All</button>\r\n                    <div className=\"following-friends-list\">\r\n                   \r\n                    <ul className=\"following-list-con\">\r\n                        {this.state.following && this.state.following.map(function (user, index) {\r\n                            return <FriendsInvitePreview handleChange={this.handleChange.bind(this)}  key={index} user={user} />\r\n                        }.bind(this))}\r\n\r\n                    </ul>\r\n                    </div>\r\n                    <button className=\"send-invites-btn\" onClick={() => this.sendInvites()} >Send Invites</button>\r\n                </ReactModal>\r\n    \r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n      loggedInUser: state.userModule.loggedInUser\r\n    }\r\n  }\r\n  const mapDispatchToProps = {\r\n  }\r\n  \r\n  export const InviteModal = connect(mapStateToProps, mapDispatchToProps)(_InviteModal)\r\n","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\InviteFriends.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\StaticMap.jsx",["239"],"import React from 'react';\r\n\r\nexport class StaticMap extends React.Component {\r\n \r\n    render() {\r\n        const API_KEY = 'AIzaSyBTd-r9ES9me88-mTQasKgom191cNMihjY';\r\n        return (\r\n            <div>\r\n                <img src={`https://maps.googleapis.com/maps/api/staticmap?center=${this.props.lat},${this.props.lng}&zoom=15&size=500x300&key=${API_KEY}&markers=color:purple|scale:2|${this.props.lat},${this.props.lng}` } />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\pages\\JamsList.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\cmps\\JamChat.jsx",[],"C:\\Users\\danie\\OneDrive\\שולחן העבודה\\dev\\jameet\\jammit\\frontend\\src\\services\\socketService.js",[],{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","severity":1,"message":"245","line":6,"column":8,"nodeType":"246","messageId":"247","endLine":6,"endColumn":17},{"ruleId":"248","severity":1,"message":"249","line":526,"column":1,"nodeType":"250","messageId":"251","endLine":552,"endColumn":23},{"ruleId":"244","severity":1,"message":"252","line":56,"column":27,"nodeType":"246","messageId":"247","endLine":56,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":72,"column":29,"nodeType":"255","endLine":72,"endColumn":62},{"ruleId":"244","severity":1,"message":"256","line":10,"column":10,"nodeType":"246","messageId":"247","endLine":10,"endColumn":17},{"ruleId":"253","severity":1,"message":"254","line":80,"column":11,"nodeType":"255","endLine":80,"endColumn":58},{"ruleId":"244","severity":1,"message":"257","line":92,"column":34,"nodeType":"246","messageId":"247","endLine":92,"endColumn":45},{"ruleId":"244","severity":1,"message":"258","line":10,"column":10,"nodeType":"246","messageId":"247","endLine":10,"endColumn":19},{"ruleId":"259","severity":1,"message":"260","line":29,"column":45,"nodeType":"261","messageId":"262","endLine":29,"endColumn":47},{"ruleId":"240","replacedBy":"263"},{"ruleId":"242","replacedBy":"264"},{"ruleId":"244","severity":1,"message":"265","line":1,"column":8,"nodeType":"246","messageId":"247","endLine":1,"endColumn":22},{"ruleId":"259","severity":1,"message":"266","line":9,"column":41,"nodeType":"261","messageId":"262","endLine":9,"endColumn":43},{"ruleId":"244","severity":1,"message":"267","line":51,"column":10,"nodeType":"246","messageId":"247","endLine":51,"endColumn":16},{"ruleId":"244","severity":1,"message":"268","line":3,"column":8,"nodeType":"246","messageId":"247","endLine":3,"endColumn":19},{"ruleId":"259","severity":1,"message":"266","line":7,"column":41,"nodeType":"261","messageId":"262","endLine":7,"endColumn":43},{"ruleId":"269","severity":1,"message":"270","line":20,"column":72,"nodeType":"271","endLine":20,"endColumn":93},{"ruleId":"259","severity":1,"message":"266","line":28,"column":79,"nodeType":"261","messageId":"262","endLine":28,"endColumn":81},{"ruleId":"253","severity":1,"message":"254","line":15,"column":24,"nodeType":"255","endLine":15,"endColumn":91},{"ruleId":"244","severity":1,"message":"272","line":5,"column":8,"nodeType":"246","messageId":"247","endLine":5,"endColumn":22},{"ruleId":"244","severity":1,"message":"273","line":10,"column":11,"nodeType":"246","messageId":"247","endLine":10,"endColumn":18},{"ruleId":"253","severity":1,"message":"254","line":15,"column":21,"nodeType":"255","endLine":15,"endColumn":46},{"ruleId":"244","severity":1,"message":"274","line":43,"column":16,"nodeType":"246","messageId":"247","endLine":43,"endColumn":23},{"ruleId":"253","severity":1,"message":"254","line":9,"column":17,"nodeType":"255","endLine":9,"endColumn":224},"no-native-reassign",["275"],"no-negated-in-lhs",["276"],"no-unused-vars","'jamMarker' is defined but never used.","Identifier","unusedVar","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'fullname' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'JamList' is defined but never used.","'isUserAdmin' is assigned a value but never used.","'JamScroll' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["275"],["276"],"'LocationOnIcon' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","'makeId' is defined but never used.","'userService' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'AddRoundedIcon' is defined but never used.","'history' is assigned a value but never used.","'invited' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]